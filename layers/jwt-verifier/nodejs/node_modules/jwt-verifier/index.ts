import {CognitoJwtVerifier} from 'aws-jwt-verify'
import {CognitoVerifyProperties} from 'aws-jwt-verify/cognito-verifier'

type JwtVerifierParams = {
    userPoolId: string,
    clientId: string,
    tokenUse?: CognitoVerifyProperties['tokenUse']
}

export type CognitoJwtPayload = Readonly<{
    sub: string                 // 48c516d4-b8c9-4f4b-8dda-b3981ff41040
    iss: string                 // https://cognito-idp.eu-central-1.amazonaws.com/eu-central-1_aazzXX
    'cognito:username': string  // 48c516d4-b8c9-4f4b-8dda-b3981ff41040
    origin_jti: string          // d8abff89-b5a0-4469-977f-2b6e4d31e586
    aud: string                 // 33qki9jqdhd0pibjbub1avm465
    event_id: string            // 36a01835-8cc3-4347-a784-1dd581391ede
    token_use: string           // id
    auth_time: number           // 1693827009
    exp: number                 // 1693851415
    iat: number                 // 1693850515
    jti: string                 // 15ed1900-b152-4bca-976c-120e6e3f49fc
    email: string               // lech.klesa@ipn.com
}>

export class JwtVerifier {

    private readonly verifier

    constructor({
                    userPoolId,
                    clientId,
                    tokenUse = 'id',
                }: JwtVerifierParams) {
        this.verifier = CognitoJwtVerifier.create({
            userPoolId,
            clientId,
            tokenUse,
        })
    }

    public async verify(authHeader: string): Promise<CognitoJwtPayload> {
        const encodedToken = authHeader.includes('Bearer') ? authHeader.split(' ')[1] : authHeader
        const verified = this.verifier.verify(encodedToken) as unknown
        return verified as CognitoJwtPayload
    }
}